# game/matchmaker.py
import asyncio
from database.models import Match
from database.db import async_session

class Matchmaker:
    def __init__(self):
        self.waiting_players = set()
        self.wait_tasks = {}  # user_id ‚Üí task

    async def _create_ai_match(self, user_id: int):
        """–°–æ–∑–¥–∞—ë—Ç –º–∞—Ç—á –ø—Ä–æ—Ç–∏–≤ AI"""
        async with async_session() as session:
            new_match = Match(
                player1_id=user_id,
                player2_id=-1,  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è AI
                status="active",
                is_ai_match=True  # –¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ –≤ –ë–î
            )
            session.add(new_match)
            await session.commit()
            match_id = new_match.id

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        from main import bot
        try:
            await bot.send_message(
                user_id,
                "–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í –±–æ–π –≤—Å—Ç—É–ø–∞–µ—Ç –ë–û–¢-—Å—Ç–∞–ª–∫–µ—Ä! ü§ñ\n"
                "–†–∞—É–Ω–¥ 1 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.",
                reply_markup=pass_or_play_kb()
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    async def add_player(self, user_id: int):
        self.waiting_players.add(user_id)

        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –±—ã–ª–∞
        if user_id in self.wait_tasks:
            self.wait_tasks[user_id].cancel()

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –∏–≥—Ä–æ–∫–∞ ‚Äî –º–∞—Ç—á!
        if len(self.waiting_players) >= 2:
            p1 = self.waiting_players.pop()
            p2 = self.waiting_players.pop()
            if p1 in self.wait_tasks:
                self.wait_tasks[p1].cancel()
            if p2 in self.wait_tasks:
                self.wait_tasks[p2].cancel()

            async with async_session() as session:
                new_match = Match(
                    player1_id=p1,
                    player2_id=p2,
                    status="active",
                    is_ai_match=False
                )
                session.add(new_match)
                await session.commit()
                return new_match.id

        # –ò–Ω–∞—á–µ ‚Äî –∂–¥—ë–º 10 —Å–µ–∫, –ø–æ—Ç–æ–º –¥–∞—ë–º –±–æ—Ç–∞
        async def wait_and_assign_ai(uid):
            await asyncio.sleep(10)
            if uid in self.waiting_players:
                self.waiting_players.discard(uid)
                await self._create_ai_match(uid)

        self.wait_tasks[user_id] = asyncio.create_task(wait_and_assign_ai(user_id))
        return None
